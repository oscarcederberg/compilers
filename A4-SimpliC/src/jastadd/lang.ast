Program ::= FunctionDecl*;
Block ::= Stmt*;

FunctionDecl ::= <ID> IdDecl* Block;
UnkownFuncDecl : FunctionDecl;

abstract Stmt;
abstract Expr;

//BREAKING CHANGE TODO STUFF BELOW
// IdDecl :: = <ID>;
// FunctionDecl :: IdDecl IdDecl* Block;
// VariableDecl : Stmt ::= IdDecl [Expr];
// ... osv+

IdDecl : Stmt ::= <ID> [Expr];
UnkownIdDecl : IdDecl;
Assign : Stmt ::= <ID> Expr;
While : Stmt ::= Expr Block;
If : Stmt ::= Expr Block [Else:Block];
FunctionCall : Stmt ::= <ID> Expr*;
Return : Stmt ::= Expr;

abstract BinOp : Expr ::= Left:Expr Right:Expr;

IdUse : Expr ::= <ID>;
FunctionUse: Expr ::= <ID> Expr*;
Numeral : Expr ::= <NUMERAL>;
Add : BinOp; 
Mul : BinOp;
Sub : BinOp;
Div : BinOp;
Mod : BinOp;
Neg : Expr ::= Expr; 

Equals      : BinOp; 
NotEq       : BinOp;
LessThan    : BinOp;
LessEq      : BinOp;
MoreThan    : BinOp;
MoreEq      : BinOp;