package lang.ast;
import beaver.*;
import java.util.ArrayList;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Stack;
import java.util.zip.DeflaterOutputStream;

// This is a parser generated by NeoBeaver.
public class LangParser extends beaver.Parser {
  
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

  public static class Terminals {
    public static final short EOF = 0;
    public static final short OD = 1;
    public static final short FI = 2;
    public static final short ID = 3;
    public static final short UNTIL = 4;
    public static final short THEN = 5;
    public static final short DO = 6;
    public static final short NOT = 7;
    public static final short NUMERAL = 8;
    public static final short IF = 9;
    public static final short ASSIGN = 10;
    public static final short FOR = 11;

    public static final String[] NAMES = {
        "EOF",
        "OD",
        "FI",
        "ID",
        "UNTIL",
        "THEN",
        "DO",
        "NOT",
        "NUMERAL",
        "IF",
        "ASSIGN",
        "FOR",
    };
  }

  private final Action[] actions = {
    Action.RETURN, // [0] stmt =  ifStmt (default action: return symbol 1)
    Action.RETURN, // [1] program =  stmt (default action: return symbol 1)
    Action.RETURN, // [2] id =  ID (default action: return symbol 1)
    new Action() { // [3] GOAL =  program EOF
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol program = _symbols[offset + 1];
        final Symbol sym2 = _symbols[offset + 2];
        return program;
      }
    },
    Action.RETURN, // [4] expr =  id (default action: return symbol 1)
    Action.RETURN, // [5] numeral =  NUMERAL (default action: return symbol 1)
    RETURN3, // [6] assign =  id ASSIGN expr (default action: return symbol 3)
    RETURN2, // [7] expr =  NOT expr (default action: return symbol 2)
    RETURN5, // [8] ifStmt =  IF expr THEN stmt FI (default action: return symbol 5)
    RETURN9, // [9] forStmt =  FOR id ASSIGN expr UNTIL expr DO stmt OD (default action: return symbol 9)
  };

      static final Action RETURN2 = new Action() {
        public Symbol reduce(Symbol[] _symbols, int offset) {
          return _symbols[offset + 2];
        }
      };
      static final Action RETURN3 = new Action() {
        public Symbol reduce(Symbol[] _symbols, int offset) {
          return _symbols[offset + 3];
        }
      };
      static final Action RETURN5 = new Action() {
        public Symbol reduce(Symbol[] _symbols, int offset) {
          return _symbols[offset + 5];
        }
      };
      static final Action RETURN9 = new Action() {
        public Symbol reduce(Symbol[] _symbols, int offset) {
          return _symbols[offset + 9];
        }
      };
  static final ParsingTables PARSING_TABLES = new ParsingTables(
    "U9oLbJjImp0GXbTvnp5v4WYF43g6WeQQXewEXf8PQBa1NU06782McYimd883q5A6Dp7$hYN" +
    "R4rbA8iqdZN$#h3RnhY1I5rId5MfIcxf4L0O1A8465QbA5Qf54og8fmUL8Xdol2hhGFj3#D" +
    "VPB#eMcL6NjKGjwi0n54SQnnhHrDQy$Z#UwHvhoRcs$pTVJ$oSPzR$mpFTv#ckEDHtvFFDC" +
    "zsJiURmV$7CqJzvfhkL3m$pVdrvRkIVIvkEV3vuvlp15N$R4T#LvuxZt7UUgAXGwYr4RTH1" +
    "0uHI9otKT0TLtKETYaVNZq8rwy$4glY3n9zunL#KDKGdr8mZZHDPmzIfhRlyiOx#A5D5Qu4" +
    "vTudusizvpellrLrnolxlPSK9$Fw5usH#1$D#lNdcn1Qzj6G#hlWLs#lDK$dEnJgw8NcdV6" +
    "E5OA0xxG0SWHDm1Yx15RW6j#0Et8C7y0YUm3Du0Q$W3U2MK1NG1hjW7no2Ot0AplNPqp4M0" +
    "yOa#worpt6STTLet66pFgtppTMTqOPwtyje8yTDiFW8q94A$QtmsobqUW5ThT2$IlxNDF7S" +
    "GZrrSRVq$m682AUX");

  public LangParser() {
    super(PARSING_TABLES);
  }

  protected Symbol invokeReduceAction(int rule_num, int offset) {
    return actions[rule_num].reduce(_symbols, offset);
  }
}
