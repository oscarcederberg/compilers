%class "LangParser";
%package "lang.ast";

%embed {:
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}
:};

%terminals ID, NUMERAL, INT, LPAR, RPAR, LBRACE, RBRACE, SEMICOLON, COMMA;
%terminals EQUALS, PLUS, MULT, MINUS, DIV, MOD;
%terminals EQ, NOTEQ, LESSTHAN, LESSEQ, MORETHAN, MOREEQ;
%terminals WHILE, IF, ELSE;

%typeof program = "Program";
%typeof functiondecl_list = "List";
%typeof functiondecl = "FunctionDecl";
%typeof opt_stmt_list = "List";
%typeof stmt_list = "List";
%typeof opt_param_list = "List";
%typeof param_list = "List";
%typeof param = "IdDecl";
%typeof stmt = "Stmt";
%typeof iddecl = "IdDecl";
%typeof iduse = "IdUse";
%typeof assign = "Assign";
%typeof while = "While";
%typeof if = "If";
%typeof else = "Else";
%typeof block = "List";

%typeof expr = "Expr";
%typeof math_expr = "Expr";
%typeof term = "Expr";
%typeof factor = "Expr";
%typeof exprfactor = "Expr";

%typeof add	= "Add";
%typeof mult = "Mult";
%typeof mod = "Mod";
%typeof div = "Div";

%typeof numeralfactor = "Numeral";
%typeof idfactor = "IdUse";

%left PLUS, MULT, SUB, MOD, DIV;

%nonassoc EQUALS, EQ, NOTEQ, LESSTHAN, LESSEQ, MORETHAN, MOREEQ;

%goal program;

program = functiondecl_list.l {: return new Program(l); :} ;

functiondecl_list = 
	functiondecl.d {:return new List().add(d); :}
	| functiondecl_list.l functiondecl.d {: return l.add(d); :}
;

functiondecl = INT ID.id LPAR opt_param_list.pl RPAR block.sl {: return new FunctionDecl(id, pl, sl); :};

opt_param_list = 
	param_list.l {: return l; :}
	|	{: return new List(); :};

param_list =
	param.s {: return new List().add(s); :}
	| stmt_list.l COMMA stmt.s {: return l.add(s); :}
;

param = INT ID.id {: return new IdDecl(id); :};

opt_stmt_list =
	stmt_list.l {: return l; :}
	|	{: return new List(); :}
;
stmt_list =
	stmt.s {: return new List().add(s); :}
	| stmt_list.l stmt.s {: return l.add(s); :}
;
stmt = 
	INT ID.id SEMICOLON{: return new IdDecl(id); :}
	| ID.id EQUALS expr.e SEMICOLON {: return new Assign(id, e); :}
	| WHILE LPAR expr.cond RPAR stmt.s {: return new While(cond, new List(s)); :}
	| WHILE LPAR expr.cond RPAR block.l {: return new While(cond,l); :}
	| IF LPAR expr.cond RPAR stmt.s {: return new If(cond, new List(s), new Opt()); :}
	| IF LPAR expr.cond RPAR block.l {: return new If(cond, l, new Opt()); :}
	| IF LPAR expr.cond RPAR block.l else.e {: return new If(cond, l, new Opt(e)); :}
;

expr =
	math_expr.e							{: return e; :}
	| math_expr.l EQ math_expr.r		{: return new Equals(l, r); :}
	| math_expr.l NOTEQ math_expr.r 	{: return new NotEq(l, r); :}
	| math_expr.l LESSTHAN math_expr.r 	{: return new LessThan(l, r); :}
	| math_expr.l LESSEQ math_expr.r 	{: return new LessEq(l, r); :}
	| math_expr.l MORETHAN math_expr.r 	{: return new MoreThan(l, r); :}
	| math_expr.l MOREEQ math_expr.r 	{: return new MoreEq(l, r); :}
;

math_expr =
	 expr.e PLUS term.t {: return new Add(e,t); :}
	| expr.e MINUS term.t {: return new Sub(e,t); :} 
	| term.t {: return t; :}
;

term = 
	term.t MULT factor.f 	{: return new Mult(t,f); :}
	| term.t MOD factor.f 	{: return new Mod(t,f); :}
	| term.t DIV factor.f 	{: return new Div(t,f); :}
 	| factor.f 				{: return f; :}
;

factor =
	ID.id {: return new IdUse(id); :}
	| NUMERAL.n {: return new Numeral(n); :}
	| LPAR expr.e RPAR {: return e; :}
;

block = 
	LBRACE opt_stmt_list.l RBRACE {: return l; :};

else =
	ELSE stmt.s	{: return new Else(new List(s)); :}
	| ELSE block.l {: return new Else(l); :}
;