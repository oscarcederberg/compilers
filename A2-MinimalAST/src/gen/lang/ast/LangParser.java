package lang.ast;
import beaver.*;
import java.util.ArrayList;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Stack;
import java.util.zip.DeflaterOutputStream;

// This is a parser generated by NeoBeaver.
public class LangParser extends beaver.Parser {
  
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

  public static class Terminals {
    public static final short EOF = 0;
    public static final short ID = 1;
    public static final short RPAR = 2;
    public static final short INT = 3;
    public static final short MINUS = 4;
    public static final short PLUS = 5;
    public static final short WHILE = 6;
    public static final short SEMICOLON = 7;
    public static final short IF = 8;
    public static final short LPAR = 9;
    public static final short LESSTHAN = 10;
    public static final short LESSEQ = 11;
    public static final short MORETHAN = 12;
    public static final short MOREEQ = 13;
    public static final short NOTEQ = 14;
    public static final short EQ = 15;
    public static final short RBRACE = 16;
    public static final short NUMERAL = 17;
    public static final short COMMA = 18;
    public static final short MOD = 19;
    public static final short DIV = 20;
    public static final short MULT = 21;
    public static final short LBRACE = 22;
    public static final short ELSE = 23;
    public static final short EQUALS = 24;

    public static final String[] NAMES = {
        "EOF",
        "ID",
        "RPAR",
        "INT",
        "MINUS",
        "PLUS",
        "WHILE",
        "SEMICOLON",
        "IF",
        "LPAR",
        "LESSTHAN",
        "LESSEQ",
        "MORETHAN",
        "MOREEQ",
        "NOTEQ",
        "EQ",
        "RBRACE",
        "NUMERAL",
        "COMMA",
        "MOD",
        "DIV",
        "MULT",
        "LBRACE",
        "ELSE",
        "EQUALS",
    };
  }

  private final Action[] actions = {
    new Action() { // [0] functiondecl_list =  functiondecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final FunctionDecl d = (FunctionDecl) _symbols[offset + 1].value;
        return new List().add(d);
      }
    },
    new Action() { // [1] program =  functiondecl_list
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        return new Program(l);
      }
    },
    new Action() { // [2] GOAL =  program EOF
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Program program = (Program) _symbols[offset + 1].value;
        final Symbol sym2 = _symbols[offset + 2];
        return program;
      }
    },
    new Action() { // [3] functiondecl_list =  functiondecl_list functiondecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        final FunctionDecl d = (FunctionDecl) _symbols[offset + 2].value;
        return l.add(d);
      }
    },
    new Action() { // [4] opt_param_list = 
      public Symbol reduce(Symbol[] _symbols, int offset) {
        return new List();
      }
    },
    new Action() { // [5] param_list =  param
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdDecl s = (IdDecl) _symbols[offset + 1].value;
        return new List().add(s);
      }
    },
    new Action() { // [6] opt_param_list =  param_list
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        return l;
      }
    },
    new Action() { // [7] stmt_list =  stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Stmt s = (Stmt) _symbols[offset + 1].value;
        return new List().add(s);
      }
    },
    new Action() { // [8] param =  INT ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final Symbol id = _symbols[offset + 2];
        return new IdDecl(id);
      }
    },
    new Action() { // [9] stmt_list =  stmt_list stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        final Stmt s = (Stmt) _symbols[offset + 2].value;
        return l.add(s);
      }
    },
    new Action() { // [10] stmt =  INT ID SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final Symbol id = _symbols[offset + 2];
        final Symbol SEMICOLON = _symbols[offset + 3];
        return new IdDecl(id);
      }
    },
    new Action() { // [11] expr =  math_expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr e = (Expr) _symbols[offset + 1].value;
        return e;
      }
    },
    new Action() { // [12] factor =  NUMERAL
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol n = _symbols[offset + 1];
        return new Numeral(n);
      }
    },
    new Action() { // [13] math_expr =  term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr t = (Expr) _symbols[offset + 1].value;
        return t;
      }
    },
    new Action() { // [14] term =  factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr f = (Expr) _symbols[offset + 1].value;
        return f;
      }
    },
    new Action() { // [15] factor =  ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        return new IdUse(id);
      }
    },
    new Action() { // [16] param_list =  stmt_list COMMA stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        final Symbol COMMA = _symbols[offset + 2];
        final Stmt s = (Stmt) _symbols[offset + 3].value;
        return l.add(s);
      }
    },
    new Action() { // [17] functiondecl =  INT ID LPAR opt_param_list RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final Symbol id = _symbols[offset + 2];
        final Symbol LPAR = _symbols[offset + 3];
        final List pl = (List) _symbols[offset + 4].value;
        final Symbol RPAR = _symbols[offset + 5];
        final List sl = (List) _symbols[offset + 6].value;
        return new FunctionDecl(id, pl, sl);
      }
    },
    new Action() { // [18] opt_stmt_list = 
      public Symbol reduce(Symbol[] _symbols, int offset) {
        return new List();
      }
    },
    new Action() { // [19] opt_stmt_list =  stmt_list
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        return l;
      }
    },
    new Action() { // [20] stmt =  ID EQUALS expr SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        final Symbol EQUALS = _symbols[offset + 2];
        final Expr e = (Expr) _symbols[offset + 3].value;
        final Symbol SEMICOLON = _symbols[offset + 4];
        return new Assign(id, e);
      }
    },
    new Action() { // [21] math_expr =  expr PLUS term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr e = (Expr) _symbols[offset + 1].value;
        final Symbol PLUS = _symbols[offset + 2];
        final Expr t = (Expr) _symbols[offset + 3].value;
        return new Add(e,t);
      }
    },
    new Action() { // [22] stmt =  IF LPAR expr RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol IF = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expr cond = (Expr) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final List l = (List) _symbols[offset + 5].value;
        return new If(cond, l, new Opt());
      }
    },
    new Action() { // [23] stmt =  IF LPAR expr RPAR stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol IF = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expr cond = (Expr) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Stmt s = (Stmt) _symbols[offset + 5].value;
        return new If(cond, new List(s), new Opt());
      }
    },
    new Action() { // [24] math_expr =  expr MINUS term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr e = (Expr) _symbols[offset + 1].value;
        final Symbol MINUS = _symbols[offset + 2];
        final Expr t = (Expr) _symbols[offset + 3].value;
        return new Sub(e,t);
      }
    },
    new Action() { // [25] expr =  math_expr MORETHAN math_expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr l = (Expr) _symbols[offset + 1].value;
        final Symbol MORETHAN = _symbols[offset + 2];
        final Expr r = (Expr) _symbols[offset + 3].value;
        return new MoreThan(l, r);
      }
    },
    new Action() { // [26] expr =  math_expr NOTEQ math_expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr l = (Expr) _symbols[offset + 1].value;
        final Symbol NOTEQ = _symbols[offset + 2];
        final Expr r = (Expr) _symbols[offset + 3].value;
        return new NotEq(l, r);
      }
    },
    new Action() { // [27] expr =  math_expr LESSTHAN math_expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr l = (Expr) _symbols[offset + 1].value;
        final Symbol LESSTHAN = _symbols[offset + 2];
        final Expr r = (Expr) _symbols[offset + 3].value;
        return new LessThan(l, r);
      }
    },
    new Action() { // [28] expr =  math_expr LESSEQ math_expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr l = (Expr) _symbols[offset + 1].value;
        final Symbol LESSEQ = _symbols[offset + 2];
        final Expr r = (Expr) _symbols[offset + 3].value;
        return new LessEq(l, r);
      }
    },
    new Action() { // [29] expr =  math_expr EQ math_expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr l = (Expr) _symbols[offset + 1].value;
        final Symbol EQ = _symbols[offset + 2];
        final Expr r = (Expr) _symbols[offset + 3].value;
        return new Equals(l, r);
      }
    },
    new Action() { // [30] expr =  math_expr MOREEQ math_expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr l = (Expr) _symbols[offset + 1].value;
        final Symbol MOREEQ = _symbols[offset + 2];
        final Expr r = (Expr) _symbols[offset + 3].value;
        return new MoreEq(l, r);
      }
    },
    new Action() { // [31] term =  term MOD factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr t = (Expr) _symbols[offset + 1].value;
        final Symbol MOD = _symbols[offset + 2];
        final Expr f = (Expr) _symbols[offset + 3].value;
        return new Mod(t,f);
      }
    },
    new Action() { // [32] term =  term MULT factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr t = (Expr) _symbols[offset + 1].value;
        final Symbol MULT = _symbols[offset + 2];
        final Expr f = (Expr) _symbols[offset + 3].value;
        return new Mult(t,f);
      }
    },
    new Action() { // [33] term =  term DIV factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr t = (Expr) _symbols[offset + 1].value;
        final Symbol DIV = _symbols[offset + 2];
        final Expr f = (Expr) _symbols[offset + 3].value;
        return new Div(t,f);
      }
    },
    new Action() { // [34] factor =  LPAR expr RPAR
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LPAR = _symbols[offset + 1];
        final Expr e = (Expr) _symbols[offset + 2].value;
        final Symbol RPAR = _symbols[offset + 3];
        return e;
      }
    },
    new Action() { // [35] stmt =  WHILE LPAR expr RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol WHILE = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expr cond = (Expr) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final List l = (List) _symbols[offset + 5].value;
        return new While(cond,l);
      }
    },
    new Action() { // [36] stmt =  WHILE LPAR expr RPAR stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol WHILE = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expr cond = (Expr) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Stmt s = (Stmt) _symbols[offset + 5].value;
        return new While(cond, new List(s));
      }
    },
    new Action() { // [37] block =  LBRACE opt_stmt_list RBRACE
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LBRACE = _symbols[offset + 1];
        final List l = (List) _symbols[offset + 2].value;
        final Symbol RBRACE = _symbols[offset + 3];
        return l;
      }
    },
    new Action() { // [38] stmt =  IF LPAR expr RPAR block else
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol IF = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expr cond = (Expr) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final List l = (List) _symbols[offset + 5].value;
        final Else e = (Else) _symbols[offset + 6].value;
        return new If(cond, l, new Opt(e));
      }
    },
    new Action() { // [39] else =  ELSE block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol ELSE = _symbols[offset + 1];
        final List l = (List) _symbols[offset + 2].value;
        return new Else(l);
      }
    },
    new Action() { // [40] else =  ELSE stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol ELSE = _symbols[offset + 1];
        final Stmt s = (Stmt) _symbols[offset + 2].value;
        return new Else(new List(s));
      }
    },
  };

  static final ParsingTables PARSING_TABLES = new ParsingTables(
    "U9pjcKrm54KKn$#RtPqbWK08No7aOybt04LGGL5H4R#$KbwyM9wyUV5YURAqB2yUBCkBDmv" +
    "wywGNBtgnl6YLHoq$y1DGWXfKG5507F#ltqnwPZDB#cqmuP3k#hr#hxlVzEkUwPcTMQ3sDi" +
    "geO0LwC8gU#3ECeGrhKSMTM8qETA6EGVIX7skSDapjBaHEdw0kvVKixwPF7Vjm0sx6JTHkm" +
    "LxNjX#tua40jSIwBIblJye3INb7KXvat$jmBn37U1WFKGQd#5zNb0qU5yFx9gdTwX3$usLW" +
    "weulOANJEicgW37EMwF2EhF7UhF71hD7Dzdej6OptvGtutFcCJPR7UA$bQnMr9f9lUOn$ff" +
    "LjmIw33NOMnliWSlWCH8OYq$pdy6659zLibfHQoQDcwCoppp#Kx9gIhvrRXssaUsO30yg$a" +
    "DGwIgknaxim2vSXMkQU9mHLAhjSzh3wyu#BQXKs#UaosvSXsip7gS4bMhxdFRmkalsrVrTK" +
    "AcspsaFhxkq1yRL3Tv7FghVp1w$UXcOBha$ufC57Zhh6mrZsFTv#AvDzzvYt7sMFQuiZtjW" +
    "tOFsw#f#mz43neXdvZh4lqXMJSct5jJzBAXKs#UaI#DTz2V9gYcvu#Nh7d1r9oIhfkGyYkg" +
    "c1PLg#rmSbV7ioJ6F2ofTnVpFg1y5bO4UFmWg0psE2Ie3FOuAAWCzZWWg0ps#5rIgxNFQm#" +
    "lE$avGgRRFQG#lE$jRGQNQFgSzlExiRmILQlkSzl2wix#Mh9gIcsLHtLUILLFohGLrXpMhh" +
    "kJRitLECzzBuYybgwRaHYYg#qAoQag#jQ3kSycgAVbMHvbljeDyHvOymllg6Ci9leVKUSyT" +
    "OjdBtofzZ3hLv0t5wsdPx$Gwom6dZSws3VCjkLJWKLYoBu$WtglbIEKuE74k8iqUbeHsiuS" +
    "zgXBQj3yYiYB0eyqSLSdiOP#vtQEKhbIpcQExmRRFlAMrQXuLkWgYwcazAjJ2eyhP3QkDjP" +
    "VV8omguxLhNzsDhKILimDcVgazM1WLpo0gg1gYclNGSuuEhEHpenEhiQPL3wp3UcnOP0$xw" +
    "YuWgj0Kke$oOnWzMhYtptUrp$78h5Fu63axQ9#7xTfqxot5tMVPOuazx7lGVbqLx825Z56u" +
    "enPmRm#$9uQFWKsB5fNfx8MDiUmHxh4aJ#V$zTfjsGFM7TBACseHvX7WmRbEFG$tM#4YzF#" +
    "zNT0lYK#GPydBv2to8P6lAUUuF1rac1maZv6doIlaLV8#EKpE06sho2ZPJmwGfyXBv7NoBl" +
    "c4p03bAXaaUyaKuTZb5yWXyWxvc4o3bmfXZ9NTX35MsA$262kl4SPO#OWS8UU1AkTMtK7sa" +
    "CV9CuGnLjya7n36M3q5H8mnOemHOumU9OmnOepH6#GzyYav2THgf4xsaKV8a#H5SYXPlwFF" +
    "KQGm7MkmPx9sKdUyiIwfFqik9FfqKietpr9HVu5jrIRrKLBAl#8yR#Y2$eCj$xFATshvbZr" +
    "6jh7RwLZxjYS#svEnJsIErzaiXb1uZ9qDzbJnnwWhAarYWZjgZ8nmNqqGMRbnsaEaJhQoha" +
    "xwKSOMzrMfX3xIc#ZZxcjM15vjfCH#5RQNMLOTVSwlcDuCcpC#0qwFCCnnXSd$02R3jrK=");

  public LangParser() {
    super(PARSING_TABLES);
  }

  protected Symbol invokeReduceAction(int rule_num, int offset) {
    return actions[rule_num].reduce(_symbols, offset);
  }
}
