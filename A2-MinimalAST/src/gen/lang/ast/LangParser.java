package lang.ast;
import beaver.*;
import java.util.ArrayList;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Stack;
import java.util.zip.DeflaterOutputStream;

// This is a parser generated by NeoBeaver.
public class LangParser extends beaver.Parser {
  
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

  public static class Terminals {
    public static final short EOF = 0;
    public static final short ID = 1;
    public static final short MINUS = 2;
    public static final short RPAR = 3;
    public static final short INT = 4;
    public static final short COMMA = 5;
    public static final short LPAR = 6;
    public static final short SEMICOLON = 7;
    public static final short NUMERAL = 8;
    public static final short WHILE = 9;
    public static final short IF = 10;
    public static final short RETURN = 11;
    public static final short PLUS = 12;
    public static final short RBRACE = 13;
    public static final short NOTEQ = 14;
    public static final short MORETHAN = 15;
    public static final short MOREEQ = 16;
    public static final short EQ = 17;
    public static final short LESSEQ = 18;
    public static final short LESSTHAN = 19;
    public static final short MOD = 20;
    public static final short DIV = 21;
    public static final short MUL = 22;
    public static final short LBRACE = 23;
    public static final short ELSE = 24;
    public static final short EQUALS = 25;

    public static final String[] NAMES = {
        "EOF",
        "ID",
        "MINUS",
        "RPAR",
        "INT",
        "COMMA",
        "LPAR",
        "SEMICOLON",
        "NUMERAL",
        "WHILE",
        "IF",
        "RETURN",
        "PLUS",
        "RBRACE",
        "NOTEQ",
        "MORETHAN",
        "MOREEQ",
        "EQ",
        "LESSEQ",
        "LESSTHAN",
        "MOD",
        "DIV",
        "MUL",
        "LBRACE",
        "ELSE",
        "EQUALS",
    };
  }

  private final Action[] actions = {
    new Action() { // [0] opt_functiondecl_list = 
      public Symbol reduce(Symbol[] _symbols, int offset) {
        return new List();
      }
    },
    new Action() { // [1] functiondecl_list =  functiondecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final FunctionDecl d = (FunctionDecl) _symbols[offset + 1].value;
        return new List().add(d);
      }
    },
    new Action() { // [2] program =  opt_functiondecl_list
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        return new Program(l);
      }
    },
    new Action() { // [3] opt_functiondecl_list =  functiondecl_list
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        return l;
      }
    },
    new Action() { // [4] GOAL =  program EOF
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Program program = (Program) _symbols[offset + 1].value;
        final Symbol sym2 = _symbols[offset + 2];
        return program;
      }
    },
    new Action() { // [5] functiondecl_list =  functiondecl_list functiondecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        final FunctionDecl d = (FunctionDecl) _symbols[offset + 2].value;
        return l.add(d);
      }
    },
    new Action() { // [6] opt_param_list = 
      public Symbol reduce(Symbol[] _symbols, int offset) {
        return new List();
      }
    },
    new Action() { // [7] opt_param_list =  param_list
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        return l;
      }
    },
    new Action() { // [8] param_list =  param
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdDecl p = (IdDecl) _symbols[offset + 1].value;
        return new List().add(p);
      }
    },
    new Action() { // [9] param =  INT ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final Symbol id = _symbols[offset + 2];
        return new IdDecl(id, new Opt());
      }
    },
    new Action() { // [10] param_list =  param_list COMMA param
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        final Symbol COMMA = _symbols[offset + 2];
        final IdDecl p = (IdDecl) _symbols[offset + 3].value;
        return l.add(p);
      }
    },
    new Action() { // [11] functiondecl =  INT ID LPAR opt_param_list RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final Symbol id = _symbols[offset + 2];
        final Symbol LPAR = _symbols[offset + 3];
        final List pl = (List) _symbols[offset + 4].value;
        final Symbol RPAR = _symbols[offset + 5];
        final Block b = (Block) _symbols[offset + 6].value;
        return new FunctionDecl(id, pl, b);
      }
    },
    new Action() { // [12] opt_stmt_list = 
      public Symbol reduce(Symbol[] _symbols, int offset) {
        return new List();
      }
    },
    new Action() { // [13] stmt_list =  stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Stmt s = (Stmt) _symbols[offset + 1].value;
        return new List().add(s);
      }
    },
    new Action() { // [14] opt_stmt_list =  stmt_list
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        return l;
      }
    },
    new Action() { // [15] stmt =  if
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final If s = (If) _symbols[offset + 1].value;
        return s;
      }
    },
    new Action() { // [16] stmt =  while
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final While w = (While) _symbols[offset + 1].value;
        return w;
      }
    },
    new Action() { // [17] stmt =  iddecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final IdDecl id = (IdDecl) _symbols[offset + 1].value;
        return id;
      }
    },
    new Action() { // [18] block =  LBRACE opt_stmt_list RBRACE
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LBRACE = _symbols[offset + 1];
        final List l = (List) _symbols[offset + 2].value;
        final Symbol RBRACE = _symbols[offset + 3];
        return new Block(l);
      }
    },
    new Action() { // [19] opt_arg_list = 
      public Symbol reduce(Symbol[] _symbols, int offset) {
        return new List();
      }
    },
    new Action() { // [20] math_expr =  term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr t = (Expr) _symbols[offset + 1].value;
        return t;
      }
    },
    new Action() { // [21] factor =  ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        return new IdUse(id);
      }
    },
    new Action() { // [22] term =  factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr f = (Expr) _symbols[offset + 1].value;
        return f;
      }
    },
    new Action() { // [23] factor =  NUMERAL
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol n = _symbols[offset + 1];
        return new Numeral(n);
      }
    },
    new Action() { // [24] expr =  math_expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr e = (Expr) _symbols[offset + 1].value;
        return e;
      }
    },
    new Action() { // [25] stmt_list =  stmt_list stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        final Stmt s = (Stmt) _symbols[offset + 2].value;
        return l.add(s);
      }
    },
    new Action() { // [26] arg_list =  expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr e = (Expr) _symbols[offset + 1].value;
        return new List().add(e);
      }
    },
    new Action() { // [27] opt_arg_list =  arg_list
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        return l;
      }
    },
    new Action() { // [28] factor =  MINUS factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol MINUS = _symbols[offset + 1];
        final Expr f = (Expr) _symbols[offset + 2].value;
        return new Neg(f);
      }
    },
    new Action() { // [29] stmt =  RETURN expr SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol RETURN = _symbols[offset + 1];
        final Expr e = (Expr) _symbols[offset + 2].value;
        final Symbol SEMICOLON = _symbols[offset + 3];
        return new Return(e);
      }
    },
    new Action() { // [30] iddecl =  INT ID SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final Symbol id = _symbols[offset + 2];
        final Symbol SEMICOLON = _symbols[offset + 3];
        return new IdDecl(id, new Opt());
      }
    },
    new Action() { // [31] stmt =  ID EQUALS expr SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        final Symbol EQUALS = _symbols[offset + 2];
        final Expr e = (Expr) _symbols[offset + 3].value;
        final Symbol SEMICOLON = _symbols[offset + 4];
        return new Assign(id, e);
      }
    },
    new Action() { // [32] term =  term DIV factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr t = (Expr) _symbols[offset + 1].value;
        final Symbol DIV = _symbols[offset + 2];
        final Expr f = (Expr) _symbols[offset + 3].value;
        return new Div(t,f);
      }
    },
    new Action() { // [33] term =  term MUL factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr t = (Expr) _symbols[offset + 1].value;
        final Symbol MUL = _symbols[offset + 2];
        final Expr f = (Expr) _symbols[offset + 3].value;
        return new Mul(t,f);
      }
    },
    new Action() { // [34] term =  term MOD factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr t = (Expr) _symbols[offset + 1].value;
        final Symbol MOD = _symbols[offset + 2];
        final Expr f = (Expr) _symbols[offset + 3].value;
        return new Mod(t,f);
      }
    },
    new Action() { // [35] factor =  LPAR expr RPAR
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LPAR = _symbols[offset + 1];
        final Expr e = (Expr) _symbols[offset + 2].value;
        final Symbol RPAR = _symbols[offset + 3];
        return e;
      }
    },
    new Action() { // [36] expr =  math_expr NOTEQ math_expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr l = (Expr) _symbols[offset + 1].value;
        final Symbol NOTEQ = _symbols[offset + 2];
        final Expr r = (Expr) _symbols[offset + 3].value;
        return new NotEq(l, r);
      }
    },
    new Action() { // [37] expr =  math_expr LESSEQ math_expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr l = (Expr) _symbols[offset + 1].value;
        final Symbol LESSEQ = _symbols[offset + 2];
        final Expr r = (Expr) _symbols[offset + 3].value;
        return new LessEq(l, r);
      }
    },
    new Action() { // [38] math_expr =  math_expr MINUS term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr e = (Expr) _symbols[offset + 1].value;
        final Symbol MINUS = _symbols[offset + 2];
        final Expr t = (Expr) _symbols[offset + 3].value;
        return new Sub(e,t);
      }
    },
    new Action() { // [39] expr =  math_expr MORETHAN math_expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr l = (Expr) _symbols[offset + 1].value;
        final Symbol MORETHAN = _symbols[offset + 2];
        final Expr r = (Expr) _symbols[offset + 3].value;
        return new MoreThan(l, r);
      }
    },
    new Action() { // [40] expr =  math_expr MOREEQ math_expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr l = (Expr) _symbols[offset + 1].value;
        final Symbol MOREEQ = _symbols[offset + 2];
        final Expr r = (Expr) _symbols[offset + 3].value;
        return new MoreEq(l, r);
      }
    },
    new Action() { // [41] expr =  math_expr LESSTHAN math_expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr l = (Expr) _symbols[offset + 1].value;
        final Symbol LESSTHAN = _symbols[offset + 2];
        final Expr r = (Expr) _symbols[offset + 3].value;
        return new LessThan(l, r);
      }
    },
    new Action() { // [42] math_expr =  math_expr PLUS term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr e = (Expr) _symbols[offset + 1].value;
        final Symbol PLUS = _symbols[offset + 2];
        final Expr t = (Expr) _symbols[offset + 3].value;
        return new Add(e,t);
      }
    },
    new Action() { // [43] expr =  math_expr EQ math_expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr l = (Expr) _symbols[offset + 1].value;
        final Symbol EQ = _symbols[offset + 2];
        final Expr r = (Expr) _symbols[offset + 3].value;
        return new Equals(l, r);
      }
    },
    new Action() { // [44] while =  WHILE LPAR expr RPAR stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol WHILE = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expr cond = (Expr) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Stmt s = (Stmt) _symbols[offset + 5].value;
        return new While(cond, new Block(new List(s)));
      }
    },
    new Action() { // [45] while =  WHILE LPAR expr RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol WHILE = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expr cond = (Expr) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Block l = (Block) _symbols[offset + 5].value;
        return new While(cond,l);
      }
    },
    new Action() { // [46] arg_list =  arg_list COMMA expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        final Symbol COMMA = _symbols[offset + 2];
        final Expr e = (Expr) _symbols[offset + 3].value;
        return l.add(e);
      }
    },
    new Action() { // [47] stmt =  ID LPAR opt_arg_list RPAR SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final List l = (List) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Symbol SEMICOLON = _symbols[offset + 5];
        return new FunctionCall(id, l);
      }
    },
    new Action() { // [48] factor =  ID LPAR opt_arg_list RPAR
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final List l = (List) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        return new FunctionUse(id, l);
      }
    },
    new Action() { // [49] if =  IF LPAR expr RPAR stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol IF = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expr cond = (Expr) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Stmt s = (Stmt) _symbols[offset + 5].value;
        return new If(cond, new Block(new List(s)), new Opt());
      }
    },
    new Action() { // [50] if =  IF LPAR expr RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol IF = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expr cond = (Expr) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Block l = (Block) _symbols[offset + 5].value;
        return new If(cond, l, new Opt());
      }
    },
    new Action() { // [51] iddecl =  INT ID EQUALS expr SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final Symbol id = _symbols[offset + 2];
        final Symbol EQUALS = _symbols[offset + 3];
        final Expr e = (Expr) _symbols[offset + 4].value;
        final Symbol SEMICOLON = _symbols[offset + 5];
        return new IdDecl(id, new Opt(e));
      }
    },
    new Action() { // [52] if =  IF LPAR expr RPAR block ELSE block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol IF = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expr cond = (Expr) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Block l = (Block) _symbols[offset + 5].value;
        final Symbol ELSE = _symbols[offset + 6];
        final Block e = (Block) _symbols[offset + 7].value;
        return new If(cond, l, new Opt(e));
      }
    },
  };

  static final ParsingTables PARSING_TABLES = new ParsingTables(
    "U9pjcbri55KKn$$TRhjTFWeKeT3IRKiffPGFKL04Yu0VYAXyg2WgAX8J7qoCyS745zG74wE" +
    "lFfXeOcACySduu4VYWuycA88A8b2eMXKe0g9y#L6k$pldJkSEdMNdNc132EVaT#wTC#VCFV" +
    "VEpExExWBv$KgX1XdKeHfLQZD6eX9P3CTO552FHboF9ep0D4n15wPYF1x77MXGPxXt1XhPD" +
    "fbziqrxjMddc7O1Lk1Qt8bha3EUcsCHAsbNuow04NfxLM3N1FOUDH2qzzBU5$JMcjm765$0" +
    "EjRtu6053o4GzP#qd4y1Zp3YKKQKadp9Y26Y$lN8#IVUff9X7kFyZLhddDCqenoJHhkEmd5" +
    "E2KuondqSznMWNEMUeauAJZad1AUSu$4sbKm8RFFWzZXCmaGUuwzpvBIurHL8gtkA#ZEoqj" +
    "DgUnAaBTMX9yUsEj1kUjD9PweZ55ktOyLJr1#HbPvMsvCWCrDL4n$dQ6IbfzNs9EGSYQpqj" +
    "DgU19dbNflFMgl3wh2qjaTlHPvulDyuEaVzxbZR8NL8Mo7qYJzKN8Uvc1SVnxcs#QcYuhNr" +
    "gtvjSODkGv$uushb75G7jHL2d$ZZQkKSK0Uq5KAV#EDg5UUp1jrgFuzgCBA4BCGYt8Ibk16" +
    "BXwp1Rv6LdbRRao0#jTsQ8kQMixPlItNak2npJr6$2auvlz3SxZZGSiTuBPxtQJboL9$gqr" +
    "O8VUAFgvNpSsIbfzNs9DVc#hg3krD53Hd7z2wvjRwIGxa$LTHvZwD#YgpqjDgU12doUITHp" +
    "6TazMDafQVLzYI8pxezd2eg9gfNzMehX3xnnzNAsQVsQIk4Fl77rShPg$PgAuG#ySVLAcwz" +
    "ntnwL8#sGkWJVrojf6wrXn468qjA3DIjTZFUa2v7xLAxj1L2d$X37V8PgLlzm0X3wjfsCjw" +
    "GEkTxnXjIpcU7sg6j4Fh47sh2VBOpmf2oDezx3e#LE6Q2gEyYApsjjYSXvzl8Ia#hxKd8#K" +
    "PmgcrRPAMdrVOav6nLMxKLGf$uushbV1rPwMcrFGdZR8cizBJQdfXi26A#YgpqjDgU1F7vp" +
    "k7Bo4fFg$5CfKv1bg#kqzdEu3Dc1v$F2xpIMj30P#DPj8syrlJtPgtiTm5cRvPxmtt5spQY" +
    "NyMJ8xHjKueHqNPeOMtP$YR6ImMjKGKg4Cv9scmKeKe8Aaf59EJ0FmTPXvngZt4gNKO8SqY" +
    "LUqvPnl4vFyuhm9nwZnpFTNFEyRbsAk8Po6COXhCTUOuSd#lj7CShVssO61y7cIWRDHUjjd" +
    "AjTRbgyxddVDOQRjLXWkyvHKPUhnnoCk6TYjoWRmIfnIYCnXZKOIpVZSTXV7mSvzfofMEAr" +
    "OPgXzfyvbEkDKWnpf0Sh#lwufoV#AkEvtkZptLGhlSVd$butgTboV6whWFhVBqvl#vSRcjz" +
    "9QUCvpIm5#JpGM9i$VcCKzxtnel#FkUJutCTNC3QVCQvt6gx9ERZSy$vt0lbUbxmVgvt7AT" +
    "ixzikEVgfn7CSd#ySYex3fwcDBqHV#pMGkP1V1vyaBv8toSTaCzdFXwyAqaZcaTM4SHLFax" +
    "V89sGxEGnaCcGSMKXM4SPaNY7la4$9Jd8Cg1nEsibYieuyIruZxv7Fo6vo7CZMaawobAmdp" +
    "v5NoVlaSxANd0Agnf2PP1dPG9udhvCFo1UaZmm0rVLa3bb1dY2Ro1laGxA5SAuvpZN7kUOu" +
    "rznomhdcNY9Sazn7P1lf1sgof43capNaAV8oUPjm3ZLRoL4WdoUjf9ki9SyGpY7$Bk4yyhl" +
    "qkU09wjb44qBPOsyRNr#2hvVqd#KxaX1tcWoSxTT0BuIq#b#1jIR#H49SdTLlJ3gMoJt3$U" +
    "F912k#sRJwtrPTmJVAycyWde$WLm$zRvK59gRRj8jCkwpOMALWxieqSPIJ9dwZ#pVdbwZC2" +
    "$u9ribFL3F8J3AThuoTHA$xB6vta2dSxa0bpqSrfa6Vcmgs5MYsQEL#VTuciTz06atRHBgO" +
    "tywsBV1b65#90cb6bd6LWpIG9iCagszlJqPLG7kGNyMSB5hOQWf1cyFi$m6jiIH3");

  public LangParser() {
    super(PARSING_TABLES);
  }

  protected Symbol invokeReduceAction(int rule_num, int offset) {
    return actions[rule_num].reduce(_symbols, offset);
  }
}
