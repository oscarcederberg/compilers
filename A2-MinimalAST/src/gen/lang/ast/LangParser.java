package lang.ast;
import beaver.*;
import java.util.ArrayList;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Stack;
import java.util.zip.DeflaterOutputStream;

// This is a parser generated by NeoBeaver.
public class LangParser extends beaver.Parser {
  
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

  public static class Terminals {
    public static final short EOF = 0;
    public static final short INT = 1;
    public static final short LBRACE = 2;
    public static final short ID = 3;
    public static final short RPAR = 4;
    public static final short RBRACE = 5;
    public static final short LPAR = 6;

    public static final String[] NAMES = {
        "EOF",
        "INT",
        "LBRACE",
        "ID",
        "RPAR",
        "RBRACE",
        "LPAR",
    };
  }

  private final Action[] actions = {
    new Action() { // [0] functiondecl_list =  functiondecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final FunctionDecl d = (FunctionDecl) _symbols[offset + 1].value;
        return new List().add(d);
      }
    },
    new Action() { // [1] program =  functiondecl_list
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        return new Program(l);
      }
    },
    new Action() { // [2] functiondecl_list =  functiondecl_list functiondecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        final FunctionDecl d = (FunctionDecl) _symbols[offset + 2].value;
        return l.add(d);
      }
    },
    new Action() { // [3] GOAL =  program EOF
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Program program = (Program) _symbols[offset + 1].value;
        final Symbol sym2 = _symbols[offset + 2];
        return program;
      }
    },
    new Action() { // [4] functiondecl =  INT ID LPAR RPAR LBRACE RBRACE
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final Symbol ID = _symbols[offset + 2];
        final Symbol LPAR = _symbols[offset + 3];
        final Symbol RPAR = _symbols[offset + 4];
        final Symbol LBRACE = _symbols[offset + 5];
        final Symbol RBRACE = _symbols[offset + 6];
        return new FunctionDecl();
      }
    },
  };

  static final ParsingTables PARSING_TABLES = new ParsingTables(
    "U9o5aCqEWZ0GXAU55WJrmDcRle29Lmy#WF6HzBb1kaw5r2u7dEJBPh8$RGR00oKi2kdXu06" +
    "Xa2I1tPygvAfp8wECcTsetbljDSgroctLtY0335#jUQz1zVsPaQI5AqJoddPgqgzCbifPvT" +
    "po9jcza5AB#Un9HmxaI4xaJ2xaIcxaFk$qp#bKYFKVyIsioJ4dmvmCgsLYbl$nQ3yQhBWe");

  public LangParser() {
    super(PARSING_TABLES);
  }

  protected Symbol invokeReduceAction(int rule_num, int offset) {
    return actions[rule_num].reduce(_symbols, offset);
  }
}
