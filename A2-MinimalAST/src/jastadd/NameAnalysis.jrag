import java.util.Set;
import java.util.HashSet;

aspect NameAnalysis {
	public class SymbolTable {
		private static final SymbolTable BOTTOM = new SymbolTable() {
			@Override
			public boolean declare(String name) {
				throw new UnsupportedOperationException(
						"cannot add name to bottom of name stack");
			}
			@Override
			public boolean lookup(String name) {
				return false;
			}
		};

		private final SymbolTable tail;
		private final Set<String> names = new HashSet<String>(); //Make this a HashMap

		public SymbolTable() {
			tail = BOTTOM;
		}

		public SymbolTable(SymbolTable tail) {
			this.tail = tail;
		}

		/**
		 * Attempt to add a new name to the symbol table.
		 * @return true if name was not already declared
		 */
		public boolean declare(String name) {
			boolean temp = names.add(name);
			if(!temp) System.exit(1);
			return temp;
		}

		/**
		 * @return true if name has been declared
		 */
		public boolean lookup(String name) {
			boolean temp = names.contains(name) || tail.lookup(name);
			if (!temp) System.exit(1);
			return temp;
		}

		/**
		 * Push a new table on the stack.
		 * @return the new top of the stack
		 */
		public SymbolTable push() {
			return new SymbolTable(this);
		}
	}

	/**
	 * @param err where to write error messages
	 */
	public void Program.checkNames(PrintStream err) {
		SymbolTable vars = new SymbolTable();
		SymbolTable funcs = new SymbolTable();
		
		funcs.declare("print");
		funcs.declare("read");
		
		super.checkNames(err,vars,funcs);
	}

	/**
	 * @param err where to write error messages
	 * @param symbols symbol table
	 */
	public void ASTNode.checkNames(PrintStream err, SymbolTable vars, SymbolTable funcs) {
    	for (ASTNode child : astChildren()) {
		  child.checkNames(err, vars, funcs);
		}
	}

	public void Block.checkNames(PrintStream err, SymbolTable vars, SymbolTable funcs){
		vars = vars.push();
		funcs = funcs.push();
		super.checkNames(err,vars,funcs);
	}

	// Uses of func symbol table
	public void FunctionDecl.checkNames(PrintStream err, SymbolTable vars, SymbolTable funcs) {
		if (!funcs.declare(getID())) {
			err.format("Error at line %d: symbol \'%s\' is already declared!", getLine(), getID());
			err.println();
		}
		vars = vars.push();
		
		super.checkNames(err,vars,funcs);
	}	
	public void FunctionCall.checkNames(PrintStream err, SymbolTable vars, SymbolTable funcs) {
		if (!funcs.lookup(getID())) {
			err.format("Error at line %d: symbol \'%s\' has not been declared before this use!", getLine(), getID());
			err.println();
		}	
		super.checkNames(err,vars,funcs);
	}
	public void FunctionUse.checkNames(PrintStream err, SymbolTable vars, SymbolTable funcs) {
		if (!funcs.lookup(getID())) {
			err.format("Error at line %d: symbol \'%s\' has not been declared before this use!", getLine(), getID());
			err.println();
		}
		super.checkNames(err,vars,funcs);
	}

	// Uses of vars symbol table
	public void IdDecl.checkNames(PrintStream err, SymbolTable vars, SymbolTable funcs) {
		if (!vars.declare(getID())) {
			err.format("Error at line %d: symbol \'%s\' is already declared!", getLine(), getID());
			err.println();
		}
		super.checkNames(err,vars,funcs);
	}
	public void Assign.checkNames(PrintStream err, SymbolTable vars, SymbolTable funcs) {
		if (!vars.lookup(getID())) {
			err.format("Error at line %d: symbol \'%s\' has not been declared before this use!", getLine(), getID());
			err.println();
		}
		super.checkNames(err,vars,funcs);
	}
	public void IdUse.checkNames(PrintStream err, SymbolTable vars, SymbolTable funcs) {
		if (!vars.lookup(getID())) {
			err.format("Error at line %d: symbol \'%s\' has not been declared before this use!", getLine(), getID());
			err.println();
		}
		super.checkNames(err,vars,funcs);
	}
	
	/*
	public void Binding.checkNames(PrintStream err, SymbolTable symbols) {
		getExpr().checkNames(err, symbols.push());
		getIdDecl().checkNames(err, symbols);
	}

	public void Let.checkNames(PrintStream err, SymbolTable symbols) {
		symbols = symbols.push();
		for (Binding b : getBindings()) {
		  b.checkNames(err, symbols);
		}
		getExpr().checkNames(err, symbols);
	}

	public void Ask.checkNames(PrintStream err, SymbolTable symbols) {
		if (hasDefault()) {
			getDefault().checkNames(err, symbols.push());
		}
	}

	public void IdDecl.checkNames(PrintStream err, SymbolTable symbols) {
		if (!symbols.declare(getID())) {
			err.format("Error at line %d: symbol \'%s\' is already declared!", getLine(), getID());
			err.println();
		}
	}

	public void IdUse.checkNames(PrintStream err, SymbolTable symbols) {
		if (!symbols.lookup(getID())) {
			err.format("Error at line %d: symbol \'%s\' has not been declared before this use!", getLine(), getID());
			err.println();
		}
	}*/

	/**
	 * Helper method
	 * @return line number of this token
	 */
	public int ASTNode.getLine() {
		return getLine(getStart());
	}
}
