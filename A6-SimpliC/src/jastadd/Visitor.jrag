aspect Visitor {
	/**
	 * Visitor interface for MinimalC language. Each concrete node type must
	 * have a visit method.
	 */
	public interface Visitor {
		public Object visit(List node, Object data);
		public Object visit(Opt node, Object data);
		public Object visit(Program node, Object data);
		public Object visit(IdDecl node, Object data);
		public Object visit(FunctionDecl node, Object data);
		public Object visit(Block node, Object data);
		public Object visit(Stmt node, Object data);
		public Object visit(Expr node, Object data);
	}

	public Object ASTNode.accept(Visitor visitor, Object data) {
		throw new Error("Visitor: accept method not available for " + getClass().getName());
	}
	public Object List.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Opt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Program.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object IdDecl.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object FunctionDecl.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Block.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}	
	public Object Stmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
	public Object Expr.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
}
