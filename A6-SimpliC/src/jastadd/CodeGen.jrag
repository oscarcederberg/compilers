aspect CodeGen {
    public void Program.genCode(PrintStream out) {
        out.println(".global _start");
        // etc.
        out.println("_start:");
        // call main function
        out.println("call main");
        out.println("call _exit\n");
        for (FunctionDecl decl: getFunctionDeclList()) {
            decl.genCode(out);
        }
        // call sys_exit
        out.println("_exit:");
        out.println("movq %rax, %rdi   # exit code = 0");
        out.println("movq $60, %rax  # sys_exit");
        out.println("syscall");
        // helper procedures (print/read)
    }

    public void FunctionDecl.genCode(PrintStream out) {
        out.println(getIdDecl().getID() + ":");
        out.println("pushq %rbp");
        out.println("movq %rsp, %rbp");
        getBlock().genCode(out);
        
        // implicit return for main
		if(getIdDecl().getID().equals("main")) {
            out.println("movq $0, %rax");
            out.println("popq %rbp");
            out.println("ret\n");
        }
    }
    public void Block.genCode(PrintStream out) {
        for (Stmt stmt : getStmtList()) {
            stmt.genCode(out);
        }
    }

    public void Stmt.genCode(PrintStream out) {
        throw new RuntimeException();
    }
    public void Return.genCode(PrintStream out) {
        getExpr().genCode(out);
		out.println("movq %rbp, %rsp");
		out.println("popq %rbp");
        out.println("ret\n");
    }
    
    public void Expr.genCode(PrintStream out) {
        throw new RuntimeException();
    }
    public void Numeral.genCode(PrintStream out) {
		out.println("movq $" + getNUMERAL() + ", %rax");
	}
}