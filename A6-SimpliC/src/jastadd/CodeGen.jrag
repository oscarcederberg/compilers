aspect CodeGen {
    public void Program.genCode(PrintStream out) {
        out.println(".global _start");
        out.println(".data");
        out.println("buf: .skip 1024");
        out.println(".text");
        out.println("_start:");
        // call main function
        out.println("call main");
        out.println("call _exit\n");
        for (FunctionDecl decl: getFunctionDeclList()) {
            decl.genCode(out);
        }
        // print
        out.println("print:");
        out.println("pushq %rbp");
        out.println("movq %rsp, %rbp");
        out.println("### Convert integer to string (itoa).");
        out.println("movq 16(%rbp), %rax");
        out.println("leaq buf(%rip), %rsi # RSI = write pointer (starts at end of buffer)");
        out.println("addq $1023, %rsi");
        out.println("movb $0x0A, (%rsi) # insert newline");
        out.println("movq $1, %rcx # RCX = string length");
        out.println("cmpq $0, %rax");
        out.println("jge itoa_loop");
        out.println("negq %rax # negate to make RAX positive");
        out.println("itoa_loop: # do.. while (at least one iteration)");
        out.println("movq $10, %rdi");
        out.println("movq $0, %rdx");
        out.println("idivq %rdi # divide RDX:RAX by 10");
        out.println("addb $0x30, %dl");
        out.println("decq %rsi # move string pointer");
        out.println("movb %dl, (%rsi)");
        out.println("incq %rcx # increment string length");
        out.println("cmpq $0, %rax");
        out.println("jg itoa_loop # produce more digits");
        out.println("itoa_done:");
        out.println("movq 16(%rbp), %rax");
        out.println("cmpq $0, %rax");
        out.println("jge print_end");
        out.println("decq %rsi");
        out.println("incq %rcx");
        out.println("movb $0x2D, (%rsi)");
        out.println("print_end:");
        out.println("movq $1, %rdi");
        out.println("movq %rcx, %rdx");
        out.println("movq $1, %rax");
        out.println("syscall");
        out.println("popq %rbp");
        out.println("ret\n");
        // read
        out.println("read:");
        out.println("pushq %rbp");
        out.println("movq %rsp, %rbp");
        out.println("### R9 = sign");
        out.println("movq $1, %r9 # sign <- 1");
        out.println("### R10 = sum");
        out.println("movq $0, %r10 # sum <- 0");
        out.println("skip_ws: # skip any leading whitespace");
        out.println("movq $0, %rdi");
        out.println("leaq buf(%rip), %rsi");
        out.println("movq $1, %rdx");
        out.println("movq $0, %rax");
        out.println("syscall # get one char: sys_read(0, buf, 1)");
        out.println("cmpq $0, %rax");
        out.println("jle atoi_done # nchar <= 0");
        out.println("movb (%rsi), %cl # c <- current char");
        out.println("cmp $32, %cl");
        out.println("je skip_ws # c == space");
        out.println("cmp $13, %cl");
        out.println("je skip_ws # c == CR");
        out.println("cmp $10, %cl");
        out.println("je skip_ws # c == NL");
        out.println("cmp $9, %cl");
        out.println("je skip_ws # c == tab");
        out.println("cmp $45, %cl # check if negative");
        out.println("jne atoi_loop");
        out.println("movq $-1, %r9 # sign <- -1");
        out.println("movq $0, %rdi");
        out.println("leaq buf(%rip), %rsi");
        out.println("movq $1, %rdx");
        out.println("movq $0, %rax");
        out.println("syscall # get one char: sys_read(0, buf, 1)");
        out.println("atoi_loop:");
        out.println("cmpq $0, %rax # while (nchar > 0)");
        out.println("jle atoi_done # leave loop if nchar <= 0");
        out.println("movzbq (%rsi), %rcx # move byte, zero extend to quad-word");
        out.println("cmpq $0x30, %rcx");
        out.println("jl atoi_done # character is not numeric");
        out.println("cmpq $0x39, %rcx");
        out.println("jg atoi_done # character is not numeric");
        out.println("imulq $10, %r10 # multiply sum by 10");
        out.println("subq $0x30, %rcx # value of character");
        out.println("addq %rcx, %r10 # add to sum");
        out.println("movq $0, %rdi");
        out.println("leaq buf(%rip), %rsi");
        out.println("movq $1, %rdx");
        out.println("movq $0, %rax");
        out.println("syscall # get one char: sys_read(0, buf, 1)");
        out.println("jmp atoi_loop # loop back");
        out.println("atoi_done:");
        out.println("imulq %r9, %r10 # sum *= sign");
        out.println("movq %r10, %rax # put result value in RAX");
        out.println("popq %rbp");
        out.println("ret\n");
        // call sys_exit
        out.println("_exit:");
        out.println("movq %rax, %rdi   # exit code = 0");
        out.println("movq $60, %rax  # sys_exit");
        out.println("syscall");
    }

    public void FunctionDecl.genCode(PrintStream out) {
        out.println(getIdDecl().getID() + ":");
        out.println("pushq %rbp");
        out.println("movq %rsp, %rbp");
        out.println("subq $" + getBlock().numLocals() * 8 + ", %rsp");
        getBlock().genCode(out);
        
        // implicit return for main
		if(getIdDecl().getID().equals("main")) {
            out.println("movq $0, %rax");
            out.println("movq %rbp, %rsp");
            out.println("popq %rbp");
            out.println("ret\n");
        }
    }
    public void Block.genCode(PrintStream out) {
        for (Stmt stmt : getStmtList()) {
            stmt.genCode(out);
        }
    }

    public void Stmt.genCode(PrintStream out) {
        throw new RuntimeException();
    }
    public void VariableDecl.genCode(PrintStream out) {
        if(hasExpr()) {
			getExpr().genCode(out);
			out.println("movq %rax, " + getIdDecl().address());
		} else {
			out.println("movq $0, " + getIdDecl().address());
		}
    }
    public void Assign.genCode(PrintStream out) {
        getExpr().genCode(out);
		out.println("movq %rax, " + decl().address());
    }
    public void FunctionCall.genCode(PrintStream out) {
        FunctionDecl function = decl().function();
		int params = getNumExpr();
        for (int i = params - 1; i >=  0; i--) {
            getExpr(i).genCode(out);
            out.println("push %rax");
        }
        
        out.println("call " + decl().getID());
        out.println("addq $" + (params * 8) + ", %rsp");
    }
    public void While.genCode(PrintStream out) {
        String _start = enclosedFunction().getIdDecl().getID() + "_" + index() + "start";
        String _end = enclosedFunction().getIdDecl().getID() + "_" + index() + "end";
        out.println(_start + ":");
        getExpr().genConditionalJump(out, _end);
        getBlock().genCode(out);
        out.println("jmp " + _start);
        out.println(_end + ":");
    }
    public void If.genCode(PrintStream out) {
        String _then = enclosedFunction().getIdDecl().getID() + "_" + index() + "then";
        String _else = enclosedFunction().getIdDecl().getID() + "_" + index() + "else";
        String _fi = enclosedFunction().getIdDecl().getID() + "_" + index() + "fi";
        if (hasElse()) {
            getExpr().genConditionalJump(out, _else);
            out.println(_then + ":");
            getBlock().genCode(out);
            out.println("jmp " + _fi);
            out.println(_else + ":");
            getElse().genCode(out);
        } else {
            getExpr().genConditionalJump(out, _fi);
            out.println(_then + ":");
            getBlock().genCode(out);
        }
        out.println(_fi + ":");
    }
    public void Return.genCode(PrintStream out) {
        getExpr().genCode(out);
		out.println("movq %rbp, %rsp");
		out.println("popq %rbp");
        out.println("ret\n");
    }
    
    public void Expr.genCode(PrintStream out) {
        throw new RuntimeException();
    }
    public void VariableUse.genCode(PrintStream out) {
		out.println("movq " + decl().address() + ", %rax");
    }
    public void FunctionUse.genCode(PrintStream out) {
        FunctionDecl function = decl().function();
		int params = getNumExpr();
        for (int i = params - 1; i >=  0; i--) {
            getExpr(i).genCode(out);
            out.println("push %rax");
        }
        
        out.println("call " + decl().getID());
        out.println("addq $" + (params * 8) + ", %rsp");
    }
    public void Numeral.genCode(PrintStream out) {
		out.println("movq $" + getNUMERAL() + ", %rax");
	}
    public void BinOp.genCode(PrintStream out) {
		getLeft().genCode(out);
        out.println("pushq %rax");
		getRight().genCode(out);
        out.println("movq %rax, %rbx");
		out.println("popq %rax");
    }
    public void Add.genCode(PrintStream out) {
		super.genCode(out);
        out.println("addq %rbx, %rax");
    }
    public void Sub.genCode(PrintStream out) {
		super.genCode(out);
		out.println("subq %rbx, %rax");
    }
    public void Mul.genCode(PrintStream out) {
		super.genCode(out);
		out.println("imulq %rbx, %rax");
    }
    public void Mod.genCode(PrintStream out) {
		super.genCode(out);
		out.println("movq $0, %rdx");
		out.println("idivq %rbx");
        out.println("movq %rdx, %rax");
    }
    public void Div.genCode(PrintStream out) {
		super.genCode(out);
		out.println("movq $0, %rdx");
		out.println("idivq %rbx");
    }
    public void Neg.genCode(PrintStream out) {
		getExpr().genCode(out);
		out.println("neg %rax");
    }
    public void Expr.genConditionalJump(PrintStream out, String label) {
        throw new RuntimeException();
    }
    public void BinOp.genConditionalJump(PrintStream out, String label) {
        genCode(out);
        out.println(label);
    }
    public void Equals.genCode(PrintStream out) {
		super.genCode(out);
        out.println("cmpq %rbx, %rax");
        out.print("jne ");
    }
    public void NotEq.genCode(PrintStream out) {
		super.genCode(out);
        out.println("cmpq %rbx, %rax");
        out.print("je ");
    }
    public void LessThan.genCode(PrintStream out) {
		super.genCode(out);
        out.println("cmpq %rbx, %rax");
        out.print("jge ");
    }
    public void LessEq.genCode(PrintStream out) {
		super.genCode(out);
        out.println("cmpq %rbx, %rax");
        out.print("jg ");
    }
    public void MoreThan.genCode(PrintStream out) {
		super.genCode(out);
        out.println("cmpq %rbx, %rax");
        out.print("jle ");
    }
    public void MoreEq.genCode(PrintStream out) {
		super.genCode(out);
        out.println("cmpq %rbx, %rax");
        out.print("jl ");
    }

	inh String Stmt.index();

    syn int ASTNode.localIndex() = prevNode().localIndex();
    eq FunctionDecl.localIndex() = 0;
    eq IdDecl.localIndex() = prevNode().localIndex() + 1;
    
    inh ASTNode ASTNode.prevNode();
    eq ASTNode.getChild(int i).prevNode() = prevNode(i);
    syn ASTNode ASTNode.lastNode() = prevNode(getNumChild());
    syn ASTNode ASTNode.prevNode(int i) = i>0 ? getChild(i-1).lastNode() : this;
    syn int ASTNode.numLocals() = lastNode().localIndex() - localIndex();

    inh int IdDecl.parameterIndex();
    eq Program.getChild().parameterIndex() = -1;
    eq FunctionDecl.getVariableDecl(int index).parameterIndex() = index;

    syn String IdDecl.address() {
        if (parameterIndex() != -1) 
            return (16 + 8 * parameterIndex()) + "(%rbp)";
        else
            return "-" + (localIndex() * 8 - 8) + "(%rbp)";
    }
}