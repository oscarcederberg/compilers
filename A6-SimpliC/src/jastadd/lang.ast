Program ::= FunctionDecl*;
Block ::= Stmt*;

IdDecl ::= <ID>;
UnknownDecl : IdDecl;
FunctionDecl ::= IdDecl VariableDecl* Block;
UnknownFunction : FunctionDecl;

abstract Stmt;
abstract Expr;

VariableDecl : Stmt ::= IdDecl [Expr];
Assign : Stmt ::= <ID> Expr; //VariableUse
While : Stmt ::= Expr Block;
If : Stmt ::= Expr Block [Else:Block];
FunctionCall : Stmt ::= <ID> Expr*; //VariableUse
Return : Stmt ::= Expr;

abstract BinOp : Expr ::= Left:Expr Right:Expr;

VariableUse : Expr ::= <ID>;
FunctionUse: Expr ::= <ID> Expr*; //VariableUse
Numeral : Expr ::= <NUMERAL>;

Add : BinOp; 
Mul : BinOp;
Sub : BinOp;
Div : BinOp;
Mod : BinOp;
Neg : Expr ::= Expr; 

Equals      : BinOp; 
NotEq       : BinOp;
LessThan    : BinOp;
LessEq      : BinOp;
MoreThan    : BinOp;
MoreEq      : BinOp;

//Type Analysis
abstract Type;
IntType: Type;
BoolType: Type;
UnknownType: Type;