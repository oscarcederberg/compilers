import java.util.Set;
import java.util.TreeSet;

aspect Errors {
	public class ErrorMessage implements Comparable<ErrorMessage> {
		protected final String message;
		protected final int lineNumber;
		public ErrorMessage(String message, int lineNumber) {
			this.message = message;
			this.lineNumber = lineNumber;
		}
		public int compareTo(ErrorMessage other) {
			if (lineNumber == other.lineNumber) {
				return message.compareTo(other.message);
			}
			return Integer.compare(lineNumber, other.lineNumber); 
		}
		public String toString() {
			return "Error at line " + lineNumber + ": " + message;
		}
	} 
	protected ErrorMessage ASTNode.error(String message) {
		return new ErrorMessage(message, getLine(getStart()));
	}

	coll Set<ErrorMessage> Program.errors() [new TreeSet<ErrorMessage>()] with add root Program;

	inh Program ASTNode.program();
	eq Program.getChild().program() = this;
}


aspect ErrorContributions {
	Assign contributes error("symbol '" + getID() + "' is not declared")
		when decl().isUnknown()
		to Program.errors() for program();

	VariableUse contributes error("symbol '" + getID() + "' is not declared")
		when decl().isUnknown()
		to Program.errors() for program();

	FunctionUse contributes error("symbol '" + getID() + "' is not declared")
		when decl().isUnknown()
		to Program.errors() for program();

	FunctionCall contributes error("symbol '" + getID() + "' is not declared")
		when decl().isUnknown()
		to Program.errors() for program();
	
	Assign contributes error("symbol '" + getID() + "' is not declared as a variable")
		when !decl().isUnknown() && !decl().isVariable()
		to Program.errors() for program();
	
	VariableUse contributes error("symbol '" + getID() + "' is not declared as a variable")
		when !decl().isUnknown() && !decl().isVariable()
		to Program.errors() for program();

	FunctionUse contributes error("symbol '" + getID() + "' is not declared as a function")
		when !decl().isUnknown() && !decl().isFunction()
		to Program.errors() for program();

	FunctionCall contributes error("symbol '" + getID() + "' is not declared as a function")
		when !decl().isUnknown() && !decl().isFunction()
		to Program.errors() for program();
	
	FunctionCall contributes error("symbol '" + getID() + "' has wrong argument count")
		when !decl().function().isUnknown() && getNumExpr() != decl().function().getNumVariableDecl()
		to Program.errors() for program();
	
	FunctionUse contributes error("symbol '" + getID() + "' has wrong argument count")
		when !decl().function().isUnknown() && getNumExpr() != decl().function().getNumVariableDecl()
		to Program.errors() for program();
	
		IdDecl contributes error("symbol '" + getID() + "' is already declared!")
		when isMultiDeclared()
		to Program.errors() for program();

	BinOp contributes error("mismatched types")
		when !getLeft().expectedType().compatibleWith(getRight().expectedType())
		to Program.errors() for program();

	Expr contributes error("does not match expected type")
		when expectedType() != type()
		to Program.errors() for program();		
}
