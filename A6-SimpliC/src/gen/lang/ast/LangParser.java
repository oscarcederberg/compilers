package lang.ast;
import beaver.*;
import java.util.ArrayList;

import java.io.ByteArrayOutputStream;
import java.io.DataOutputStream;
import java.io.IOException;
import java.util.Stack;
import java.util.zip.DeflaterOutputStream;

// This is a parser generated by NeoBeaver.
public class LangParser extends beaver.Parser {
  
	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

  public static class Terminals {
    public static final short EOF = 0;
    public static final short ID = 1;
    public static final short MINUS = 2;
    public static final short RPAR = 3;
    public static final short LPAR = 4;
    public static final short INT = 5;
    public static final short COMMA = 6;
    public static final short SEMICOLON = 7;
    public static final short NUMERAL = 8;
    public static final short RETURN = 9;
    public static final short IF = 10;
    public static final short WHILE = 11;
    public static final short PLUS = 12;
    public static final short RBRACE = 13;
    public static final short LESSTHAN = 14;
    public static final short NOTEQ = 15;
    public static final short MOREEQ = 16;
    public static final short LESSEQ = 17;
    public static final short MORETHAN = 18;
    public static final short EQ = 19;
    public static final short MUL = 20;
    public static final short DIV = 21;
    public static final short MOD = 22;
    public static final short LBRACE = 23;
    public static final short EQUALS = 24;
    public static final short ELSE = 25;

    public static final String[] NAMES = {
        "EOF",
        "ID",
        "MINUS",
        "RPAR",
        "LPAR",
        "INT",
        "COMMA",
        "SEMICOLON",
        "NUMERAL",
        "RETURN",
        "IF",
        "WHILE",
        "PLUS",
        "RBRACE",
        "LESSTHAN",
        "NOTEQ",
        "MOREEQ",
        "LESSEQ",
        "MORETHAN",
        "EQ",
        "MUL",
        "DIV",
        "MOD",
        "LBRACE",
        "EQUALS",
        "ELSE",
    };
  }

  private final Action[] actions = {
    new Action() { // [0] opt_functiondecl_list = 
      public Symbol reduce(Symbol[] _symbols, int offset) {
        return new List();
      }
    },
    new Action() { // [1] opt_functiondecl_list =  functiondecl_list
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        return l;
      }
    },
    new Action() { // [2] program =  opt_functiondecl_list
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        return new Program(l);
      }
    },
    new Action() { // [3] functiondecl_list =  functiondecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final FunctionDecl d = (FunctionDecl) _symbols[offset + 1].value;
        return new List().add(d);
      }
    },
    new Action() { // [4] functiondecl_list =  functiondecl_list functiondecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        final FunctionDecl d = (FunctionDecl) _symbols[offset + 2].value;
        return l.add(d);
      }
    },
    new Action() { // [5] iddecl =  ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        return new IdDecl(id);
      }
    },
    new Action() { // [6] GOAL =  program EOF
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Program program = (Program) _symbols[offset + 1].value;
        final Symbol sym2 = _symbols[offset + 2];
        return program;
      }
    },
    new Action() { // [7] opt_param_list = 
      public Symbol reduce(Symbol[] _symbols, int offset) {
        return new List();
      }
    },
    new Action() { // [8] opt_param_list =  param_list
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        return l;
      }
    },
    new Action() { // [9] param_list =  param
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final VariableDecl p = (VariableDecl) _symbols[offset + 1].value;
        return new List().add(p);
      }
    },
    new Action() { // [10] param =  INT iddecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl id = (IdDecl) _symbols[offset + 2].value;
        return new VariableDecl(id, new Opt());
      }
    },
    new Action() { // [11] opt_stmt_list = 
      public Symbol reduce(Symbol[] _symbols, int offset) {
        return new List();
      }
    },
    new Action() { // [12] functiondecl =  INT iddecl LPAR opt_param_list RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl id = (IdDecl) _symbols[offset + 2].value;
        final Symbol LPAR = _symbols[offset + 3];
        final List pl = (List) _symbols[offset + 4].value;
        final Symbol RPAR = _symbols[offset + 5];
        final Block b = (Block) _symbols[offset + 6].value;
        return new FunctionDecl(id, pl, b);
      }
    },
    new Action() { // [13] param_list =  param_list COMMA param
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        final Symbol COMMA = _symbols[offset + 2];
        final VariableDecl p = (VariableDecl) _symbols[offset + 3].value;
        return l.add(p);
      }
    },
    new Action() { // [14] stmt =  if
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final If s = (If) _symbols[offset + 1].value;
        return s;
      }
    },
    new Action() { // [15] opt_stmt_list =  stmt_list
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        return l;
      }
    },
    new Action() { // [16] stmt =  variabledecl
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final VariableDecl id = (VariableDecl) _symbols[offset + 1].value;
        return id;
      }
    },
    new Action() { // [17] stmt =  while
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final While w = (While) _symbols[offset + 1].value;
        return w;
      }
    },
    new Action() { // [18] stmt_list =  stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Stmt s = (Stmt) _symbols[offset + 1].value;
        return new List().add(s);
      }
    },
    new Action() { // [19] opt_arg_list = 
      public Symbol reduce(Symbol[] _symbols, int offset) {
        return new List();
      }
    },
    new Action() { // [20] stmt_list =  stmt_list stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        final Stmt s = (Stmt) _symbols[offset + 2].value;
        return l.add(s);
      }
    },
    new Action() { // [21] term =  factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr f = (Expr) _symbols[offset + 1].value;
        return f;
      }
    },
    new Action() { // [22] math_expr =  term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr t = (Expr) _symbols[offset + 1].value;
        return t;
      }
    },
    new Action() { // [23] expr =  math_expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr e = (Expr) _symbols[offset + 1].value;
        return e;
      }
    },
    new Action() { // [24] factor =  ID
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        return new VariableUse(id);
      }
    },
    new Action() { // [25] factor =  NUMERAL
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol n = _symbols[offset + 1];
        return new Numeral(n);
      }
    },
    new Action() { // [26] block =  LBRACE opt_stmt_list RBRACE
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LBRACE = _symbols[offset + 1];
        final List l = (List) _symbols[offset + 2].value;
        final Symbol RBRACE = _symbols[offset + 3];
        return new Block(l);
      }
    },
    new Action() { // [27] arg_list =  expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr e = (Expr) _symbols[offset + 1].value;
        return new List().add(e);
      }
    },
    new Action() { // [28] opt_arg_list =  arg_list
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        return l;
      }
    },
    new Action() { // [29] variabledecl =  INT iddecl SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl id = (IdDecl) _symbols[offset + 2].value;
        final Symbol SEMICOLON = _symbols[offset + 3];
        return new VariableDecl(id, new Opt());
      }
    },
    new Action() { // [30] stmt =  RETURN expr SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol RETURN = _symbols[offset + 1];
        final Expr e = (Expr) _symbols[offset + 2].value;
        final Symbol SEMICOLON = _symbols[offset + 3];
        return new Return(e);
      }
    },
    new Action() { // [31] factor =  MINUS factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol MINUS = _symbols[offset + 1];
        final Expr f = (Expr) _symbols[offset + 2].value;
        return new Neg(f);
      }
    },
    new Action() { // [32] stmt =  ID EQUALS expr SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        final Symbol EQUALS = _symbols[offset + 2];
        final Expr e = (Expr) _symbols[offset + 3].value;
        final Symbol SEMICOLON = _symbols[offset + 4];
        return new Assign(id, e);
      }
    },
    new Action() { // [33] term =  term DIV factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr t = (Expr) _symbols[offset + 1].value;
        final Symbol DIV = _symbols[offset + 2];
        final Expr f = (Expr) _symbols[offset + 3].value;
        return new Div(t,f);
      }
    },
    new Action() { // [34] term =  term MOD factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr t = (Expr) _symbols[offset + 1].value;
        final Symbol MOD = _symbols[offset + 2];
        final Expr f = (Expr) _symbols[offset + 3].value;
        return new Mod(t,f);
      }
    },
    new Action() { // [35] term =  term MUL factor
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr t = (Expr) _symbols[offset + 1].value;
        final Symbol MUL = _symbols[offset + 2];
        final Expr f = (Expr) _symbols[offset + 3].value;
        return new Mul(t,f);
      }
    },
    new Action() { // [36] expr =  math_expr MOREEQ math_expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr l = (Expr) _symbols[offset + 1].value;
        final Symbol MOREEQ = _symbols[offset + 2];
        final Expr r = (Expr) _symbols[offset + 3].value;
        return new MoreEq(l, r);
      }
    },
    new Action() { // [37] expr =  math_expr LESSTHAN math_expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr l = (Expr) _symbols[offset + 1].value;
        final Symbol LESSTHAN = _symbols[offset + 2];
        final Expr r = (Expr) _symbols[offset + 3].value;
        return new LessThan(l, r);
      }
    },
    new Action() { // [38] expr =  math_expr LESSEQ math_expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr l = (Expr) _symbols[offset + 1].value;
        final Symbol LESSEQ = _symbols[offset + 2];
        final Expr r = (Expr) _symbols[offset + 3].value;
        return new LessEq(l, r);
      }
    },
    new Action() { // [39] expr =  math_expr MORETHAN math_expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr l = (Expr) _symbols[offset + 1].value;
        final Symbol MORETHAN = _symbols[offset + 2];
        final Expr r = (Expr) _symbols[offset + 3].value;
        return new MoreThan(l, r);
      }
    },
    new Action() { // [40] math_expr =  math_expr PLUS term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr e = (Expr) _symbols[offset + 1].value;
        final Symbol PLUS = _symbols[offset + 2];
        final Expr t = (Expr) _symbols[offset + 3].value;
        return new Add(e,t);
      }
    },
    new Action() { // [41] expr =  math_expr EQ math_expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr l = (Expr) _symbols[offset + 1].value;
        final Symbol EQ = _symbols[offset + 2];
        final Expr r = (Expr) _symbols[offset + 3].value;
        return new Equals(l, r);
      }
    },
    new Action() { // [42] expr =  math_expr NOTEQ math_expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr l = (Expr) _symbols[offset + 1].value;
        final Symbol NOTEQ = _symbols[offset + 2];
        final Expr r = (Expr) _symbols[offset + 3].value;
        return new NotEq(l, r);
      }
    },
    new Action() { // [43] math_expr =  math_expr MINUS term
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Expr e = (Expr) _symbols[offset + 1].value;
        final Symbol MINUS = _symbols[offset + 2];
        final Expr t = (Expr) _symbols[offset + 3].value;
        return new Sub(e,t);
      }
    },
    new Action() { // [44] factor =  LPAR expr RPAR
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol LPAR = _symbols[offset + 1];
        final Expr e = (Expr) _symbols[offset + 2].value;
        final Symbol RPAR = _symbols[offset + 3];
        return e;
      }
    },
    new Action() { // [45] if =  IF LPAR expr RPAR stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol IF = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expr cond = (Expr) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Stmt s = (Stmt) _symbols[offset + 5].value;
        return new If(cond, new Block(new List(s)), new Opt());
      }
    },
    new Action() { // [46] if =  IF LPAR expr RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol IF = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expr cond = (Expr) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Block l = (Block) _symbols[offset + 5].value;
        return new If(cond, l, new Opt());
      }
    },
    new Action() { // [47] stmt =  ID LPAR opt_arg_list RPAR SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final List l = (List) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Symbol SEMICOLON = _symbols[offset + 5];
        return new FunctionCall(id, l);
      }
    },
    new Action() { // [48] arg_list =  arg_list COMMA expr
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final List l = (List) _symbols[offset + 1].value;
        final Symbol COMMA = _symbols[offset + 2];
        final Expr e = (Expr) _symbols[offset + 3].value;
        return l.add(e);
      }
    },
    new Action() { // [49] variabledecl =  INT iddecl EQUALS expr SEMICOLON
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol INT = _symbols[offset + 1];
        final IdDecl id = (IdDecl) _symbols[offset + 2].value;
        final Symbol EQUALS = _symbols[offset + 3];
        final Expr e = (Expr) _symbols[offset + 4].value;
        final Symbol SEMICOLON = _symbols[offset + 5];
        return new VariableDecl(id, new Opt(e));
      }
    },
    new Action() { // [50] factor =  ID LPAR opt_arg_list RPAR
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol id = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final List l = (List) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        return new FunctionUse(id, l);
      }
    },
    new Action() { // [51] while =  WHILE LPAR expr RPAR stmt
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol WHILE = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expr cond = (Expr) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Stmt s = (Stmt) _symbols[offset + 5].value;
        return new While(cond, new Block(new List(s)));
      }
    },
    new Action() { // [52] while =  WHILE LPAR expr RPAR block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol WHILE = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expr cond = (Expr) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Block l = (Block) _symbols[offset + 5].value;
        return new While(cond,l);
      }
    },
    new Action() { // [53] if =  IF LPAR expr RPAR block ELSE block
      public Symbol reduce(Symbol[] _symbols, int offset) {
        final Symbol IF = _symbols[offset + 1];
        final Symbol LPAR = _symbols[offset + 2];
        final Expr cond = (Expr) _symbols[offset + 3].value;
        final Symbol RPAR = _symbols[offset + 4];
        final Block l = (Block) _symbols[offset + 5].value;
        final Symbol ELSE = _symbols[offset + 6];
        final Block e = (Block) _symbols[offset + 7].value;
        return new If(cond, l, new Opt(e));
      }
    },
  };

  static final ParsingTables PARSING_TABLES = new ParsingTables(
    "U9pjMacCL5KKFJLrTJCqWqf3DpqtSpCfaoAWZOg02AAeA0ue9fgO6EF2XJ4O5oQQk35nOQA" +
    "9nhXouS9eOennuGeHHPkn6GIHMPcr5ONdUKFL#$NhTzL$hviE9drlpZlt$dhdt$V#NByA69" +
    "GG0bbaK8KHI2E9OQWGcv3245oBwt0xgb631ZHX7EfKr8QxK2SkOmpgiG9tKpC14p49umtFC" +
    "3pJyFM6RnEN6DsB6p3BBBd3y7B5ArMxIhNtg7OrdaIbYkvJxHgsz#VN2ZMQX$0mnmKya5$h" +
    "8#9V66Ca#poEzQfFAHjKvlC84$yKHsKr5yN5N5kkPpuSx3mqYByzD7#n6Uee6kvUX$lKsKI" +
    "tef5EcZzj6zkkSUgjw$nXszZckfsbZJPSQtWiHg6HbI#K6DlvugYSYNEsZMtDJhrrdRDXbc" +
    "xpI6kDkVAMGDpJTZjJGkzpZ9uEitIRHzfaJ6KxnMJjiGfDynZRgJ1BjtcaJVUeytkOfTiyq" +
    "dosWQT6$EQc4IV3BDtcaJQxx6hd52sP6sSqeR6T42U2h6ET5tf0SrmS3xAETPvpt8Hvk35G" +
    "g4CSK$sEQLQsYBWPjs8#5c0XRYaQsr5n58iDvvVflD038ezzAew88q7MiSuBlPTr3el3kSW" +
    "kaN4kBrPu7QDBOlKgj3lT9U9NsyQsfHvr3YbQvgJv9SpIRHvfFllqO9YbsxolwWne1ZGvZU" +
    "lz1m$6wbLWue0u46GTwxpG0wArxdLwUgwADFDSBNuEitIRHzewZx7vx9z7tSk8$M9$a7Miy" +
    "q8FQFQ9VK7MiSuBFQ3PA$O6MSSwB$J0u3h47jLlZsPbYyfCg4DqAKsNvfYQtKgpMtDCpIwb" +
    "sQKvZaRi53k3h6ETvppYsMM7whT3SyonRLUQxPfZZMsRs1Pa7UiyvqLZUwpCEABgT8hE8Ej" +
    "OvuKU4FcSfp#5MRhD8yVsOvYbsxp8dk1dMqtVF4ktUMIT7smRryJtOPPkyqZD5h4bo3hMUQ" +
    "47DD#5MRhD8#ji3hDqcqUQptkARyCitUGJwAtq3A#PRRnsJkEtludyLj$6ewOT3JnUclXfY" +
    "ubgrVVhIRpArj8pH1sFglgo31MDm$WUUXItpKWKBJKQ8Snecj72EBXM26CSMw1FAREQ#1Qi" +
    "4rkJGffj1R9bUuxEH#dUZCr1atAPYTKurqbuQ5GTL5nnJOrBxrxKSTpEIfCerA8AWp2OFBI" +
    "4nkiOLQtRV7oEKP$vnAnZpnxFEZx7g5ST9EsiK1chJedrzUdO#ckV#cm3Jus#$hfe3BlCn#" +
    "7Q7byJiPPaxaorQWmXgZ4Cmp428$cS87$56tNbDL5Z2z$fojRnsQS#y$6f0zSZ0MEywlZSJ" +
    "tsE7U$xQJ$KwRThI7$L6T0CQ3plFpxddCyriHVFyU7p9x9lJMbDx#wdKMFps3$$ytjmN8tF" +
    "VAvcpTMy3VhydFDwtZ5yfSzJvoSapphzzKpHXzkwBxURwkFpdgB7EdowtV2AVLKetnJF8bO" +
    "GJnEl4kyIdnBoJUO9FWmdY3fYBh6IU8PuZdYF#8pe94u1oGpHGCmdLXFiatoT#93uYjXCd0" +
    "LIbSGuOX6nbdY1U9FuWFYIw28k0EbgOYAnc5X7l4YyHNnCV4Fi9hg1p0XY2h64M4#yHBnDV" +
    "49i8WuHbu2A6c8ciPnuYjX8l4DmhXKSMyKHWa$$MSurEvjOId2ksPS9RfFivyHMWjkaCarm" +
    "hfNp2CwrybdYDU9zuWjY6t4QgAeYMea5n1hYUU8DuYFYQuBpg3elzmTtqXwYQwFUOGSaHu5" +
    "soF31mBAJXeyJvthGTHDdP0mv#T3dqF#Cv3R7o9vgctwZpFekcBonHDzMq$SounIHLc#WvQ" +
    "zsKB$RpI3aFpRbFscuBS5Z1mj2wrWOY9UL6bkPSQ#AqQVTy0Rtj#vNhSrH$##QpkUagSGKX" +
    "IHQoTF8FCE81Dg9DkPopqpWTR2T#wk9ooOJJGQJ29wvv2JtMW9ZYNhrtbwZcPhngay2BKgV" +
    "ul8aESt#gJpgGnWRYck91lL6FqDjXkjCSNtoruSq6icDwhCiPlm7C2vGy0==");

  public LangParser() {
    super(PARSING_TABLES);
  }

  protected Symbol invokeReduceAction(int rule_num, int offset) {
    return actions[rule_num].reduce(_symbols, offset);
  }
}
