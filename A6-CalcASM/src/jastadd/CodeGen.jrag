/**
 * Simple code generation for the Calc language (EDAN65 course labs).
 * @author Jesper Ã–qvist
 */
aspect CodeGen {

  public void Program.genCode(PrintStream out) {
    out.println(".global _start");
    out.println(".data");
    out.println("ask_message: .ascii \"Please enter a number: \"");
    out.println("ask_msg_len: .quad 23");
    out.println("buf: .skip 1024");
    out.println();
    out.println(".text");
    out.println("_start:");

    // Allocate space for local variables (bindings):
    out.println("        pushq %rbp");
    out.println("        movq %rsp, %rbp");
    out.println("        subq $" + (getExpr().numLocals()*8) + ", %rsp");

    getExpr().genEval(out);// stores result in RAX


    // Print result:
    out.println("        pushq %rax");
    out.println("        call print");
    out.println("        addq $8, %rsp");

    // De-allocate local variables:
    out.println("        movq %rbp, %rsp");
    out.println("        popq %rbp");

    // Call sys_exit:
    out.println("        movq $0, %rdi");
    out.println("        movq $60, %rax");
    out.println("        syscall"); // Done!

    // Helper procedures for input/output:
    out.println("# Procedure to print number to stdout.");
    out.println("# C signature: void print(long int)");
    out.println("print:");
    out.println("        pushq %rbp");
    out.println("        movq %rsp, %rbp");
    out.println("        ### Convert integer to string (itoa).");
    out.println("        movq 16(%rbp), %rax");
    out.println("        leaq buf(%rip), %rsi    # RSI = write pointer (starts at end of buffer)");
    out.println("        addq $1023, %rsi");
    out.println("        movb $0x0A, (%rsi)      # insert newline");
    out.println("        movq $1, %rcx           # RCX = string length");
    out.println("        cmpq $0, %rax");
    out.println("        jge itoa_loop");
    out.println("        negq %rax               # negate to make RAX positive");
    out.println("itoa_loop:                      # do.. while (at least one iteration)");
    out.println("        movq $10, %rdi");
    out.println("        movq $0, %rdx");
    out.println("        idivq %rdi              # divide RDX:RAX by 10");
    out.println("        addb $0x30, %dl         # remainder + '0'");
    out.println("        decq %rsi               # move string pointer");
    out.println("        movb %dl, (%rsi)");
    out.println("        incq %rcx               # increment string length");
    out.println("        cmpq $0, %rax");
    out.println("        jg itoa_loop            # produce more digits");
    out.println("itoa_done:");
    out.println("        movq 16(%rbp), %rax");
    out.println("        cmpq $0, %rax");
    out.println("        jge print_end");
    out.println("        decq %rsi");
    out.println("        incq %rcx");
    out.println("        movb $0x2D, (%rsi)");
    out.println("print_end:");
    out.println("        movq $1, %rdi");
    out.println("        movq %rcx, %rdx");
    out.println("        movq $1, %rax");
    out.println("        syscall");
    out.println("        popq %rbp");
    out.println("        ret");
    out.println("");
    out.println("# Procedure to read number from stdin.");
    out.println("# C signature: long long int read(void)");
    out.println("read:");
    out.println("        pushq %rbp");
    out.println("        movq %rsp, %rbp");
    out.println("        ### R9  = sign");
    out.println("        movq $1, %r9            # sign <- 1");
    out.println("        ### R10 = sum");
    out.println("        movq $0, %r10           # sum <- 0");
    out.println("skip_ws: # skip any leading whitespace");
    out.println("        movq $0, %rdi");
    out.println("        leaq buf(%rip), %rsi");
    out.println("        movq $1, %rdx");
    out.println("        movq $0, %rax");
    out.println("        syscall                 # get one char: sys_read(0, buf, 1)");
    out.println("        cmpq $0, %rax");
    out.println("        jle atoi_done           # nchar <= 0");
    out.println("        movb (%rsi), %cl        # c <- current char");
    out.println("        cmp $32, %cl");
    out.println("        je skip_ws              # c == space");
    out.println("        cmp $13, %cl");
    out.println("        je skip_ws              # c == CR");
    out.println("        cmp $10, %cl");
    out.println("        je skip_ws              # c == NL");
    out.println("        cmp $9, %cl");
    out.println("        je skip_ws              # c == tab");
    out.println("        cmp $45, %cl            # check if negative");
    out.println("        jne atoi_loop");
    out.println("        movq $-1, %r9           # sign <- -1");
    out.println("        movq $0, %rdi");
    out.println("        leaq buf(%rip), %rsi");
    out.println("        movq $1, %rdx");
    out.println("        movq $0, %rax");
    out.println("        syscall                 # get one char: sys_read(0, buf, 1)");
    out.println("atoi_loop:");
    out.println("        cmpq $0, %rax           # while (nchar > 0)");
    out.println("        jle atoi_done           # leave loop if nchar <= 0");
    out.println("        movzbq (%rsi), %rcx     # move byte, zero extend to quad-word");
    out.println("        cmpq $0x30, %rcx        # test if < '0'");
    out.println("        jl atoi_done            # character is not numeric");
    out.println("        cmpq $0x39, %rcx        # test if > '9'");
    out.println("        jg atoi_done            # character is not numeric");
    out.println("        imulq $10, %r10         # multiply sum by 10");
    out.println("        subq $0x30, %rcx        # value of character");
    out.println("        addq %rcx, %r10         # add to sum");
    out.println("        movq $0, %rdi");
    out.println("        leaq buf(%rip), %rsi");
    out.println("        movq $1, %rdx");
    out.println("        movq $0, %rax");
    out.println("        syscall                 # get one char: sys_read(0, buf, 1)");
    out.println("        jmp atoi_loop           # loop back");
    out.println("atoi_done:");
    out.println("        imulq %r9, %r10         # sum *= sign");
    out.println("        movq %r10, %rax         # put result value in RAX");
    out.println("        popq %rbp");
    out.println("        ret");
    out.println();
    out.println("print_string:");
    out.println("        pushq %rbp");
    out.println("        movq %rsp, %rbp");
    out.println("        movq $1, %rdi");
    out.println("        movq 16(%rbp), %rsi");
    out.println("        movq 24(%rbp), %rdx");
    out.println("        movq $1, %rax");
    out.println("        syscall");
    out.println("        popq %rbp");
    out.println("        ret");
  }

  /**
   * Generate code to evaluate the expression and
   * store the result in RAX.
   *
   * This must be implemented for every subclass of Expr!
   */
  abstract public void Expr.genEval(PrintStream out);

  public void Numeral.genEval(PrintStream out) {
    out.println("        movq $" + getNUMERAL() + ", %rax");
  }

  public void Neg.genEval(PrintStream out) {
    getExpr().genEval(out);
    out.println("        negq %rax");
  }

  public void IdUse.genEval(PrintStream out) {
    out.println("        movq " + decl().address() + ", %rax");
  }

  public void Mul.genEval(PrintStream out) {
    getLeft().genEval(out);
    out.println("        pushq %rax");
    getRight().genEval(out);
    out.println("        movq %rax, %rbx");
    out.println("        popq %rax");
    out.println("        imulq %rbx, %rax");
  }

  public void Div.genEval(PrintStream out) {
    getLeft().genEval(out);
    out.println("        pushq %rax");
    getRight().genEval(out);
    out.println("        movq %rax, %rbx");
    out.println("        popq %rax");
    out.println("        movq $0, %rdx");// NB: clear RDX to prepare division RDX:RAX / RBX
    out.println("        idivq %rbx");
  }

  public void Let.genEval(PrintStream out) {
    // evaluate bindings:
    for (Binding b : getBindings()){
      b.genCode(out);
    }
    getExpr().genEval(out);
  }

  public void Ask.genEval(PrintStream out) {
    out.println("        pushq ask_msg_len");
    out.println("        leaq ask_message(%rip), %rax");
    out.println("        pushq %rax");
    out.println("        call print_string");
    out.println("        addq $16, %rsp");
    out.println("        call read");
  }

  public void Binding.genCode(PrintStream out) {
    getExpr().genEval(out);
    out.println("        movq %rax, " + getIdDecl().address());
  }

  /**
   * Address of local variable variable in the current stack frame.
   */
  syn String IdDecl.address() = "-"+(localIndex()*8)+"(%rbp)";

  /**
   * Local variable counting.
   */
  syn int ASTNode.numLocals() = lastNode().localIndex() - localIndex();

  /**
   * Local variable numbering.
   */
  syn int ASTNode.localIndex() = prevNode().localIndex();
  eq Program.localIndex() = 0;
  eq IdDecl.localIndex() = prevNode().localIndex() + 1;

  inh ASTNode ASTNode.prevNode();
  eq ASTNode.getChild(int i).prevNode() = prevNode(i);
  syn ASTNode ASTNode.lastNode() = prevNode(getNumChild());
  syn ASTNode ASTNode.prevNode(int i) = i>0 ? getChild(i-1).lastNode() : this;

}
